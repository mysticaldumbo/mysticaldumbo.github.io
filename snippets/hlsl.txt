// Define a simple vertex shader

// Input structure representing a vertex
struct VertexInput {
    float3 position : POSITION; // Vertex position
    float4 color : COLOR;       // Vertex color
};

// Output structure representing a vertex after transformation
struct VertexOutput {
    float4 position : SV_POSITION; // Screen space position
    float4 color : COLOR;          // Output color
};

// Vertex shader function
VertexOutput VertexShader(VertexInput input) {
    VertexOutput output;

    // Transform vertex position to screen space
    output.position = mul(unity_ObjectToWorld, float4(input.position, 1.0));

    // Pass through vertex color
    output.color = input.color;

    return output;
}

// Define a simple pixel shader

// Input structure representing interpolated data from the vertex shader
struct PixelInput {
    float4 position : SV_POSITION; // Screen space position
    float4 color : COLOR;          // Interpolated vertex color
};

// Pixel shader function
float4 PixelShader(PixelInput input) : SV_Target {
    return input.color; // Output interpolated vertex color as pixel color
}